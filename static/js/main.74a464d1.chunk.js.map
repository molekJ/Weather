{"version":3,"sources":["Data/citiesInfo.tsx","Components/Cities.tsx","GlobalStyles.tsx","Components/DisplayWeather/DisplayWeatherStyled.tsx","Components/DisplayWeather/DisplayWeather.tsx","Components/Form/FormStyled.tsx","icons/search.svg","Components/Form/Form.tsx","Components/Mapy/Mapy.tsx","pages/SearchCity.tsx","Clients/search.tsx","Components/Navbar.tsx","App.tsx","Clients/openWeather.tsx","reportWebVitals.ts","index.tsx"],"names":["citiesInfo","name","coordinates","latitude","longitude","Cities","onCityClick","selectedCity","map","city","onClick","GlobalStyle","createGlobalStyle","Container","styled","div","Header","MainInfo","Temp","p","InsideMainInfo","DisplayValue","DisplayWeather","data","changeTime","time","date","Date","hours","getHours","minutes","getMinutes","seconds","getSeconds","substr","sunriseTime","sunrise","sunsetTime","sunset","Math","round","temp","toFixed","humidity","windSpeed","pressure","clouds","Form","setInput","setInput2","input","htmlFor","placeholder","id","onChange","e","target","value","preventDefault","src","search","alt","SimpleMap","center","style","height","width","margin","bootstrapURLKeys","key","defaultCenter","defaultZoom","SearchCity","useState","input2","url","setData","loading","setLoading","error","setError","useEffect","fetchData","a","fetch","response","status","json","dataFetch","cityInfo","main","wind","speed","windDirection","deg","all","timeZone","timezone","lat","coord","lon","sys","Search","lng","Navbar","to","EmptyContainer","SelectInfo","App","setSelectedCity","OpenWeather","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.74a464d1.chunk.js","sourcesContent":["export interface Coordinate {\n  latitude: string;\n  longitude: string;\n}\n\nexport interface City {\n  name: string;\n  coordinates: Coordinate;\n}\n\nexport const citiesInfo: City[] = [\n  {\n    name: \"Biała Podlaska\",\n    coordinates: {\n      latitude: \"52.0323800\",\n      longitude: \"23.1165200\",\n    },\n  },\n  {\n    name: \"Bydgoszcz\",\n    coordinates: {\n      latitude: \"53.1235000\",\n      longitude: \"18.0076200\",\n    },\n  },\n  {\n    name: \"Toruń\",\n    coordinates: {\n      latitude: \"53.0137500\",\n      longitude: \"18.5981400\",\n    },\n  },\n  {\n    name: \"Warszawa\",\n    coordinates: {\n      latitude: \"52.2319581\",\n      longitude: \"21.0067249\",\n    },\n  },\n  {\n    name: \"Zielona Góra\",\n    coordinates: {\n      latitude: \"51.9354800\",\n      longitude: \"15.5064300\",\n    },\n  },\n  {\n    name: \"Szczecin\",\n    coordinates: {\n      latitude: \"53.4301818\",\n      longitude: \"14.5509623\",\n    },\n  },\n  {\n    name: \"Wrocław\",\n    coordinates: {\n      latitude: \"51.1263106\",\n      longitude: \"16.9781963\",\n    },\n  },\n  {\n    name: \"Łódź\",\n    coordinates: {\n      latitude: \"51.7500000\",\n      longitude: \"19.4666700\",\n    },\n  },\n  {\n    name: \"Rzeszów\",\n    coordinates: {\n      latitude: \"50.0413200\",\n      longitude: \"21.9990100\",\n    },\n  },\n  {\n    name: \"Gdańsk\",\n    coordinates: {\n      latitude: \"54.3520500\",\n      longitude: \"18.6463700\",\n    },\n  },\n  {\n    name: \"Katowice\",\n    coordinates: {\n      latitude: \"50.2584100\",\n      longitude: \"19.0275400\",\n    },\n  },\n];\n","import { citiesInfo, Coordinate } from \"../Data/citiesInfo\";\n\ninterface Props {\n  selectedCity: Coordinate | null;\n  onCityClick: (coordinates: Coordinate) => void;\n}\n\nexport const Cities: React.FC<Props> = ({ onCityClick, selectedCity }) => {\n  return (\n    <div>\n      <h2>Miasta:</h2>\n      <ul>\n        {citiesInfo.map((city) => {\n          return (\n            <li\n              key={city.coordinates.latitude}\n              onClick={() => {\n                onCityClick(city.coordinates);\n              }}\n            >\n              {\" \"}\n              {city.coordinates === selectedCity ? (\n                <strong>{city.name}</strong>\n              ) : (\n                city.name\n              )}\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n","import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyle = createGlobalStyle`\n    :root{\n           --white: #ffffff;\n    --black: #000000;\n    --lightgrey: #efefef;\n    --grey: #f9f9f9;\n    --grey2: #e9e8e8;\n    --darkgrey: #878787;\n    --darkgrey2: #787878;\n    --darkgrey3: #212121;\n    --orange: #ff801a;\n    --lightorange: #ffc79a;\n    --lightgreen: #adbb0c;\n    --blue: #3fb4fd\n    }\n\n    *{\n        margin: 0;\n        padding: 0;\n        box-sizing: border-box;\n    }\n\n    body {\n    font-family: 'Rubik', sans-serif;\n    min-height: 100vh;\n    }\n\n`;\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  background-color: var(--blue);\n  color: var(--grey2);\n  width: 1000px;\n  margin: auto;\n  display: grid;\n  grid-template-rows: 100px 200px;\n  font-weight: 600;\n  font-size: 18px;\n  border-radius: 5px;\n\n  p {\n    padding-left: 20px;\n  }\n`;\n\nexport const Header = styled.div`\n  display: grid;\n  grid-template-columns: 400px 300px 300px;\n  align-items: center;\n\n  > p {\n    font-size: 40px;\n    align-self: center;\n    padding-bottom: 0;\n  }\n\n  p {\n    align-self: center;\n  }\n`;\n\nexport const MainInfo = styled.div`\n  display: grid;\n  grid-template-columns: 400px 300px 300px;\n`;\n\nexport const Temp = styled.p`\n  font-size: 120px;\n  font-weight: 400;\n`;\n\nexport const InsideMainInfo = styled.div`\n  display: grid;\n  grid-template-rows: 100px;\n`;\n\nexport const DisplayValue = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  p:nth-of-type(2) {\n    padding-top: 10px;\n    font-size: 30px;\n  }\n`;\n","import {\n  Container,\n  DisplayValue,\n  Header,\n  InsideMainInfo,\n  MainInfo,\n  Temp,\n} from \"./DisplayWeatherStyled\";\n\ninterface Props {\n  name: string;\n  temp: number;\n  humidity: number;\n  pressure: number;\n  windSpeed: number;\n  windDirection: number;\n  clouds: number;\n  timeZone: number;\n  lat: number;\n  lon: number;\n  sunrise: number;\n  sunset: number;\n}\n\nexport const DisplayWeather: React.FC<Props> = (data: Props) => {\n  const changeTime = (time: number) => {\n    const date = new Date(time * 1000);\n    const hours = date.getHours();\n    const minutes = \"0\" + date.getMinutes();\n    const seconds = \"0\" + date.getSeconds();\n\n    const formatedTime = `${hours}: ${minutes.substr(-2)} : ${seconds.substr(\n      -2\n    )}`;\n\n    return formatedTime;\n  };\n\n  const sunriseTime = changeTime(data.sunrise);\n  const sunsetTime = changeTime(data.sunset);\n  return (\n    <Container>\n      <Header>\n        <p>{data.name}</p>\n        <DisplayValue>\n          <p>Wschod</p>\n          <p>{sunriseTime}</p>\n        </DisplayValue>\n        <DisplayValue>\n          <p>Zachod</p>\n          <p>{sunsetTime}</p>\n        </DisplayValue>\n      </Header>\n      <MainInfo>\n        <Temp>\n          {(Math.round((data.temp - 273.15) * 100) / 100).toFixed(1)}&#8451;\n        </Temp>\n        <InsideMainInfo>\n          <DisplayValue>\n            <p>Wilgotnosc</p>\n            <p> {data.humidity}%</p>\n          </DisplayValue>\n          <DisplayValue>\n            <p>Predkosc wiatru</p>\n            <p> {data.windSpeed} m/s</p>\n          </DisplayValue>\n        </InsideMainInfo>\n        <InsideMainInfo>\n          <DisplayValue>\n            <p>Cisnienie</p>\n            <p>{data.pressure} hPa</p>\n          </DisplayValue>\n          <DisplayValue>\n            <p>Zachmurzneie</p>\n            <p>{data.clouds} %</p>\n          </DisplayValue>\n        </InsideMainInfo>\n      </MainInfo>\n      {/* <p>Kierunek wiatru: {data.windDirection} deg</p> */}\n      {/* <p>Strefa czasowa: {data.timeZone}</p>\n      <p>Szerokosc geograficzna: {data.lat}</p>\n      <p>Długość geograficzna: {data.lon}</p> */}\n    </Container>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  display: flex;\n  height: 100px;\n  width: 1000px;\n  margin: auto;\n  align-items: center;\n  position: relative;\n  font-size: 16px;\n\n  button {\n    position: relative;\n    top: 15px;\n    border: none;\n    background: inherit;\n    margin-left: 20px;\n\n    img {\n      height: 40px;\n    }\n\n    :hover {\n      cursor: pointer;\n    }\n  }\n\n  input {\n    border: none;\n    font-size: 16px;\n    appearance: none;\n    background: var(--grey);\n    padding: 12px;\n    border-radius: 3px;\n    width: 250px;\n    outline: none;\n  }\n  input:focus::placeholder {\n    color: transparent;\n  }\n  input::placeholder {\n    color: #aaa;\n    transition: color 0.3s ease;\n  }\n`;\n","export default __webpack_public_path__ + \"static/media/search.5b5a18e8.svg\";","import { AiOutlineSearch } from \"react-icons/ai\";\nimport { Container } from \"./FormStyled\";\nimport search from \"../../icons/search.svg\";\ninterface Props {\n  setInput: React.Dispatch<React.SetStateAction<string>>;\n  setInput2: React.Dispatch<React.SetStateAction<string | null>>;\n  input: string;\n}\n\nexport const Form: React.FC<Props> = ({ setInput, setInput2, input }) => {\n  return (\n    <Container>\n      <form>\n        <label htmlFor=\"city-name\">Podaj miejscowość: </label>\n        <input\n          placeholder=\"Wpisz nazwę\"\n          id=\"city-name\"\n          name=\"city-name\"\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            setInput(e.target.value);\n          }}\n        ></input>\n        <button\n          onClick={(e) => {\n            e.preventDefault();\n            setInput2(input);\n          }}\n        >\n          <img src={search} alt=\"Search icon\" />\n        </button>\n      </form>\n    </Container>\n  );\n};\n","import GoogleMapReact from \"google-map-react\";\nimport styled from \"styled-components\";\n\nconst Poiner = styled.div`\n  position: relative;\n  left: -10px;\n  top: -20px;\n  border-radius: 50% 50% 50% 0;\n  border: 4px solid #ea4335;\n  width: 20px;\n  height: 20px;\n  transform: rotate(-45deg);\n`;\n\nconst AnyReactComponent = ({ text }: { text: any }) => <div>{text}</div>;\ninterface Props {\n  center: {\n    lat: number;\n    lng: number;\n  };\n}\n\nexport const SimpleMap = ({ center }: Props) => {\n  return (\n    <div style={{ height: \"400px\", width: \"1000px\", margin: \"auto\" }}>\n      <GoogleMapReact\n        bootstrapURLKeys={{ key: \"AIzaSyAhMNDTEq8ATGg9-mmj7yVxhB4Pb6TInaY\" }}\n        defaultCenter={center}\n        defaultZoom={7}\n      >\n        {/* <Poiner></Poiner> */}\n        {/* <AnyReactComponent lat={59.955413} lng={30.337844} text=\"My Marker\" /> */}\n      </GoogleMapReact>\n    </div>\n  );\n};\n","import { useState } from \"react\";\nimport { Search } from \"../Clients/search\";\nimport { DisplayWeather } from \"../Components/DisplayWeather/DisplayWeather\";\nimport { Form } from \"../Components/Form/Form\";\nimport { SimpleMap } from \"../Components/Mapy/Mapy\";\n\nexport const SearchCity = () => {\n  const [input, setInput] = useState<string>(\"\");\n  const [input2, setInput2] = useState<string | null>(null);\n\n  const { data, loading, error } = Search(\n    `https://api.openweathermap.org/data/2.5/weather?q=${input2}&appid=80dc12560ff86934dd0db3a90cbacf0c`,\n    input2\n  );\n\n  return (\n    <>\n      <Form setInput={setInput} setInput2={setInput2} input={input} />\n\n      {error && <p>Nieprawidłowa nazwa</p>}\n      {data && (\n        <DisplayWeather\n          name={data.name}\n          temp={data.temp}\n          humidity={data.humidity}\n          pressure={data.pressure}\n          windSpeed={data.windSpeed}\n          windDirection={data.windDirection}\n          clouds={data.clouds}\n          timeZone={data.timeZone}\n          lat={data.lat}\n          lon={data.lon}\n          sunrise={data.sunrise}\n          sunset={data.sunset}\n        />\n      )}\n      {data && (\n        <SimpleMap center={{ lat: data.lat, lng: data.lon }}></SimpleMap>\n      )}\n    </>\n  );\n};\n","import { useState, useEffect } from \"react\";\n\ninterface Props {\n  name: string;\n  temp: number;\n  humidity: number;\n  pressure: number;\n  windSpeed: number;\n  windDirection: number;\n  clouds: number;\n  timeZone: number;\n  lat: number;\n  lon: number;\n  sunrise: number;\n  sunset: number;\n}\n\nexport const Search = (url: string, input: string | null) => {\n  const [data, setData] = useState<null | Props>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    if (input === null) {\n      return;\n    }\n    const fetchData = async (url: string) => {\n      const response = await fetch(url);\n      if (response.status === 400 || response.status === 404) {\n        return setError(true);\n      }\n\n      const dataFetch = await response.json();\n      const cityInfo = {\n        name: dataFetch.name as string,\n        temp: dataFetch.main.temp as number,\n        humidity: dataFetch.main.humidity as number,\n        pressure: dataFetch.main.pressure as number,\n        windSpeed: dataFetch.wind.speed as number,\n        windDirection: dataFetch.wind.deg as number,\n        clouds: dataFetch.clouds.all as number,\n        timeZone: dataFetch.timezone as number,\n        lat: dataFetch.coord.lat as number,\n        lon: dataFetch.coord.lon as number,\n        sunrise: dataFetch.sys.sunrise as number,\n        sunset: dataFetch.sys.sunset as number,\n      };\n      setData({ ...cityInfo });\n      setLoading(false);\n    };\n    fetchData(url);\n  }, [input]);\n\n  return { data, loading, error };\n};\n","import { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 100px;\n\n  a {\n    margin: 0 40px;\n    text-decoration: none;\n    color: inherit;\n  }\n`;\n\nexport const Navbar = () => {\n  return (\n    <Container>\n      <Link to=\"/\">\n        <p>Lista miast</p>\n      </Link>\n      <Link to=\"/search\">\n        <p>Znajdz miasto</p>\n      </Link>\n    </Container>\n  );\n};\n","import styled from \"styled-components\";\nimport { Cities } from \"./Components/Cities\";\nimport { GlobalStyle } from \"./GlobalStyles\";\nimport { useState } from \"react\";\nimport { Coordinate } from \"./Data/citiesInfo\";\nimport { OpenWeather } from \"./Clients/openWeather\";\nimport { SearchCity } from \"./pages/SearchCity\";\nimport { Navbar } from \"./Components/Navbar\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { DisplayWeather } from \"./Components/DisplayWeather/DisplayWeather\";\nimport { SimpleMap } from \"./Components/Mapy/Mapy\";\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n\nconst EmptyContainer = styled.div`\n  width: 1000px;\n  height: 400px;\n`;\n\nconst SelectInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nfunction App() {\n  const [selectedCity, setSelectedCity] = useState<Coordinate | null>(null);\n\n  const handleCitySelection = (coordinates: Coordinate) => {\n    setSelectedCity(coordinates);\n  };\n\n  const { data, loading } = OpenWeather(\n    `https://api.openweathermap.org/data/2.5/weather?lat=${selectedCity?.latitude}&lon=${selectedCity?.longitude}&appid=80dc12560ff86934dd0db3a90cbacf0c`,\n    selectedCity\n  );\n\n  return (\n    <>\n      <Router>\n        <GlobalStyle></GlobalStyle>\n        <Navbar />\n        <Switch>\n          <Route exact path=\"/\">\n            <Container>\n              <Cities\n                selectedCity={selectedCity}\n                onCityClick={handleCitySelection}\n              ></Cities>\n              <SelectInfo>\n                {/* {loading && <div>...loading</div>} */}\n                {data ? (\n                  <>\n                    <DisplayWeather\n                      name={data?.name}\n                      temp={data?.temp}\n                      humidity={data?.humidity}\n                      pressure={data?.pressure}\n                      windSpeed={data?.windSpeed}\n                      windDirection={data?.windDirection}\n                      clouds={data?.clouds}\n                      timeZone={data?.timeZone}\n                      lat={data?.lat}\n                      lon={data?.lon}\n                      sunrise={data?.sunrise}\n                      sunset={data?.sunset}\n                    />\n                    <SimpleMap\n                      center={{ lat: data.lat, lng: data.lon }}\n                    ></SimpleMap>\n                  </>\n                ) : (\n                  <EmptyContainer></EmptyContainer>\n                )}\n              </SelectInfo>\n            </Container>\n          </Route>\n          <Route path=\"/search\">\n            <SearchCity></SearchCity>\n          </Route>\n        </Switch>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","import { useState, useEffect } from \"react\";\nimport { Coordinate } from \"../Data/citiesInfo\";\n\ninterface Props {\n  name: string;\n  temp: number;\n  humidity: number;\n  pressure: number;\n  windSpeed: number;\n  windDirection: number;\n  clouds: number;\n  timeZone: number;\n  lat: number;\n  lon: number;\n  sunrise: number;\n  sunset: number;\n}\n\nexport const OpenWeather = (url: string, selectedCity: Coordinate | null) => {\n  const [data, setData] = useState<null | Props>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    if (selectedCity === null) {\n      return;\n    }\n    const fetchData = async (url: string) => {\n      const response = await fetch(url);\n      const dataFetch = await response.json();\n      const cityInfo = {\n        name: dataFetch.name as string,\n        temp: dataFetch.main.temp as number,\n        humidity: dataFetch.main.humidity as number,\n        pressure: dataFetch.main.pressure as number,\n        windSpeed: dataFetch.wind.speed as number,\n        windDirection: dataFetch.wind.deg as number,\n        clouds: dataFetch.clouds.all as number,\n        timeZone: dataFetch.timezone as number,\n        lat: dataFetch.coord.lat as number,\n        lon: dataFetch.coord.lon as number,\n        sunrise: dataFetch.sys.sunrise as number,\n        sunset: dataFetch.sys.sunset as number,\n      };\n      setData({ ...cityInfo });\n      setLoading(false);\n    };\n    fetchData(url);\n  }, [selectedCity]);\n\n  return { data, loading };\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}